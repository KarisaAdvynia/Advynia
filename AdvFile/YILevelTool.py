"""AdvFile / YI Level Tool
Processes data formats generated by the SNES version export tool,
Yoshi's Island Level Tool."""

# standard library imports
import copy, os

# import from other files
from AdvGame import SMA3

def import_ylt(filepath):
    _verifyext(filepath, ".ylt")

    sublevel = SMA3.SublevelFromSNES()
    sublevel.fromfile = True
    with open(filepath, "rb") as f:
        sublevel.ID = f.read(1)[0]
        sublevel.importmaindata(f)
        sublevel.importspritedata(f)
    return sublevel

def import_yet(filepath):
    _verifyext(filepath, ".yet")

    with open(filepath, "rb") as f:
        mainoffsets = []
        midwayoffsets = []
        for levelID in range(0x45):
            mainoffsets.append(int.from_bytes(f.read(2), "little"))
        maindata = f.read(0xE0)
        for levelID in range(0x45):
            midwayoffsets.append(int.from_bytes(f.read(2), "little"))
        midwaydata = f.read()

    mainentr = SMA3.MainEntrances.importfrombytes(
        maindata, mainoffsets, entrancelen=4)
    SMA3.Level.swapExtraSecret(mainentr)

    midwayentr = SMA3.MidwayEntrances.importfrombytes(
        midwaydata, midwayoffsets, midwaylen=4)
    SMA3.Level.swapExtraSecret(midwayentr)

    return mainentr, midwayentr

def export_ylt(sublevel, filepath):
    """A variant of SMA3.Sublevel.exportmaindata/exportspritedata, for
    GBA-SNES exporting. Removes GBA/Advynia-exclusive features."""

    # start with sublevel ID
    data = bytearray([sublevel.ID])

    # process header values
    data += SMA3.Sublevel._headertobytes(
        sublevel.header, SMA3.SublevelFromSNES.headerbitcountsSNES)

    # process objects
    for obj in sublevel.objects:
        if obj.ID == 0x65 and obj.extID is not None:
            # skip custom object 65
            continue
        data += bytes(obj)
    data.append(0xFF)

    # process screen exits
    for screenindex, entr in sublevel.exits.items():
        data.append(screenindex)
        # adjust Bandit minigame sublevel IDs
        if 0xF6 <= entr.sublevel <= 0xFF:
            entr = copy.copy(entr)
            entr.sublevel -= 0x18
            if 0xF6 <= entr.anim <= 0xFF:
                entr.anim -= 0x18
        data += entr[0:4]  # truncate last 2 bytes
    data.append(0xFF)

    # process sprite data
    for spr in sublevel.sprites:
        if 0x1BA <= spr.ID < 0x1C4:  # skip GBA camera sprites
            continue
        elif spr.ID >= 0x1C4:  # adjust command sprite IDs
            spr = SMA3.Sprite(ID=spr.ID-0xA, x=spr.x, y=spr.y)
        data += bytes(spr)[0:3]  # truncate last byte
    data += b"\xFF"*2

    open(filepath, "wb").write(data)

def export_yet(mainentr, midwayentr, filepath):
    maindata, mainoffsets = mainentr.tobytearray(entrancelen=4, endmarker=False)
    midwaydata, midwayoffsets = midwayentr.tobytearray(midwaylen=4, endmarker=False)

    with open(filepath, "wb") as f:
        for offset in mainoffsets[0:0x45]:
            if offset is None:
                offset = 0
            f.write(offset.to_bytes(2, "little"))
        f.write(maindata)
        f.seek(0x16A)
        for offset in midwayoffsets[0:0x45]:
            if offset is None:
                offset = 0
            f.write(offset.to_bytes(2, "little"))
        f.write(midwaydata)

        f.write(bytes(0x3DC - f.tell()))

def _verifyext(filepath, ext):
    extension = os.path.splitext(filepath)[1].lower()
    if extension != ext:
        raise ValueError("Unrecognized file extension: " + extension)
